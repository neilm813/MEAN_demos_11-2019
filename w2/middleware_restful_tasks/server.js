/* 
  - "Middleware is the software that connects network-based requests generated by a client to the back-end data the client is requesting. It is a general term for software that serves to "glue together" separate, often complex and already existing programs."
  - I.e., express middleware: something that rests between the request and the response

  Below is an example of adding middleware that works similarly to the express.static method in order to serve static files, rather than using express.static, we will make our own middleware to handle this.

*/

const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();

/* 
  - our callback function that is passed to `.use` will be passed a `next` arg when our callback is executed
    - this `next` arg is itself a callback function that we can call/execute when we want to tell express to pass the current request on to the next handler if the request is not something that is our handlers job to handle
    - think of a customer service rep who receives a request from a customer and the rep cannot fulfill the request, the rep needs to send the request on to the next person in the chain who can handle the request (escalate the request)

  http://localhost:3000/this-file.txt
  http://localhost:3000/our-circumstance.html
*/
app.use(function(req, res, next) {
  // req.path is the path that comes after localhost:3000
  const filePath = path.join(__dirname, 'client', 'static', req.path);
  
  // readFile's first arg is the path
  // second arg is a callback that will be executed if error
  // third arg is callback that will be executed if file is found
  fs.readFile(filePath, () => next(), file => {
    // response part of req / res cycle
    // this req / res cycle is complete when there is a response
    res.sendFile(filePath);
  })
});

app.use(express.json()); // enables json to be received

require('./server/config/mongoose');
require('./server/config/routes')(app);

app.listen(3000, 'localhost', _ => console.log("listening on port 3000"));